
    <div class="game-table">
        <div class="decorative-frame">
            <div class="game-container">
                <div class="opponents-dice-area">
                    @for (int i = 0; i < opponents_diceList.Count(); i++)
                    {
                        <div class="dice-slot @(opponents_diceList[i].IsReroll ? "" : "frozen")">
                            <Dice DiceValue="@opponents_diceList[i]"
                                  IsRolling="@opponents_diceList[i].IsRolling"
                                  OnToggleFreeze="ToggleDiceSelection" />
                        </div>
                    }
                </div>
            <div class="center-artwork">
            </div>
            <div class="dice-area">
                <button class="balance-button">
                    @CurrentRoom.Game.GameState.Players.FirstOrDefault(x => x.Id == PlayerId).Balance
                </button>
                @for (int i = 0; i < player_diceList.Count(); i++)
                {
                    <div class="dice-slot @(player_diceList[i].IsReroll ? "" : "frozen")">
                        <Dice DiceValue="@player_diceList[i]"
                              IsRolling="@player_diceList[i].IsRolling"
                              OnToggleFreeze="ToggleDiceSelection" />
                    </div>
                }
            </div>
            </div>
            <div class="bottom-panel">
                @if (CurrentRoom.Game.GameState.Players.Count() > 1 && CurrentRoom.Game.GameState.IsGameStarted)
                {
                    if(CurrentRoom.Game.GameState.EndMiniGame == true)
                    {
                        <button class="roll-button" @onclick="LeaveRoom">LeaveRoom</button>
                        <button class="roll-button" @onclick="Continue">Continue</button>
                    }
                    else
                    {
                        if (CurrentRoom.Game.GameState.CurrentPlayerId == PlayerId)
                        {
                            <button class="roll-button" @onclick="RollDice">Roll Dice</button>
                        }
                        else
                        {
                            <button class="roll-button">Not your turn</button>
                        }
                    }
                }
                else if (CurrentRoom.Game.GameState.Players.Count() > 1 && !CurrentRoom.Game.GameState.IsGameStarted)
                {
                    <button class="roll-button" @onclick="LeaveRoom">LeaveRoom</button>
                    <button class="roll-button" @onclick="StartGame">Start Game</button>
                }

                @if (CurrentRoom.Game.GameState.Players.Count() < 2)
                {
                <button class="roll-button" @onclick="LeaveRoom">LeaveRoom</button>
                    <button class="end-turn-button">Waiting for other players</button>
                }
            </div>
        </div>
    </div>

<Betting CurrentBet="@CurrentBet"
         GameCurrentBet="@CurrentRoom.Game.GameState.GameCurrentBet"
         TotalPot="@CurrentRoom.Game.GameState.TotalPot"
         NewBet="@UpdateBet"
         PassGame = "@Pass"/>
@code {

    [Inject]
    public NavigationManager? NavigationManager { get; set; }
    [Inject]
    public GameClient? GameClient { get; set; }

    [Parameter]
    public string? RoomId { get; set; }

    private GameRoom? CurrentRoom { get; set; }

    private string? PlayerId { get; set; }
    private int CurrentBet { get; set; }

    private List<DiceClass> player_diceList = new();
    private List<DiceClass> opponents_diceList = new();

    protected override void OnInitialized()
    {
        GameClient.OnGameStateUpdated += UpdateField;

        CurrentRoom = GameClient.Rooms[RoomId];
        Console.WriteLine(CurrentRoom is null);
        Console.WriteLine(CurrentRoom.Name);
        PlayerId = GameClient.GetCurrentPlayerId();
        if (CurrentRoom.Game.GameState is not null)
        {
            CurrentBet = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id == PlayerId).CurrentBet;
            if (CurrentRoom.Game.GameState.IsGameStarted)
            {
                player_diceList = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id == PlayerId).Dices;
                opponents_diceList = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id != PlayerId).Dices;
            }
        }
        Console.WriteLine($"Room_Updated: {CurrentRoom.Name} - id: {CurrentRoom.Id}");
        Console.WriteLine($"Room_Updated: player_id: {PlayerId}");
    }

    private void UpdateField(string roomId)
    {
        if (roomId != RoomId)
            return;

        CurrentRoom = GameClient.Rooms[RoomId];
        Console.WriteLine(CurrentRoom is null);
        Console.WriteLine(CurrentRoom.Name);
        if (CurrentRoom.Game.GameState is not null)
        {
            CurrentBet = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id == PlayerId).CurrentBet;
            if (CurrentRoom.Game.GameState.IsGameStarted)
            {
                player_diceList = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id == PlayerId).Dices;
                opponents_diceList = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id != PlayerId).Dices;
            }
        }
        Console.WriteLine($"Room_Updated: {CurrentRoom.Name} - id: {CurrentRoom.Id}");
        Console.WriteLine($"Room_Updated: player_id: {PlayerId}");
        StateHasChanged();
    }

    public void Dispose()
    {
        GameClient.OnGameStateUpdated -= UpdateField;
    }

    private async Task StartGame()
    {
        if (CurrentRoom is not null)
        {
            Console.WriteLine("Room_StartGame");
            await GameClient.StartGame(CurrentRoom.Id);
            Console.WriteLine("Room_StartGame_success");
        }
    }

    private async Task RollDice()
    {
        if (CurrentRoom is not null)
        {
            if (CurrentBet < CurrentRoom.Game.GameState.GameCurrentBet)
            {
                return;
            }

            Console.WriteLine("Room_OnRollDice");
            foreach(var dice in player_diceList)
            {
                Console.WriteLine($"dice{dice.Id}: {dice.IsReroll}");
            }

            foreach (var dice in player_diceList)
            {
                if (dice.IsReroll)
                {
                    dice.IsRolling = true;
                }
            }
            StateHasChanged();
            //поменять местами на сервере сделать false
            Console.WriteLine("Begin1000");
            await Task.Delay(1000);
            Console.WriteLine("End1000");

            await GameClient.RollDice(CurrentRoom.Id, PlayerId, CurrentBet, player_diceList);

            Console.WriteLine("Room_OnRollDice_success");
        }
    }

    private async void Pass()
    {
        if (CurrentRoom.Game.GameState.CurrentPlayerId == PlayerId)
        {
            await GameClient.PassGame(CurrentRoom.Id, PlayerId);
        }
    }

    private void UpdateBet(int value)
    {
        CurrentBet = value;
    }

    private async Task Continue()
    {
        Console.WriteLine("Room_Continue");
        await GameClient.ContinueGame(CurrentRoom.Id);
        Console.WriteLine("Room_Continue_success");
    }

    private void ToggleDiceSelection(DiceClass value)
    {
        var index = value.Id;
        player_diceList[index].IsReroll = !player_diceList[index].IsReroll;
        Console.WriteLine(player_diceList[index].IsReroll);
        StateHasChanged();
    }

    private async Task LeaveRoom()
    {
        if (GameClient is not null)
        {
            await GameClient.LeaveRoom(RoomId, PlayerId);
            NavigationManager.NavigateTo("/");
        }
    }

}
