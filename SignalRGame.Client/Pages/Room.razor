@page "/room/{RoomId}"
@implements IDisposable

<PageTitle>Room @RoomId</PageTitle>

<div class="game-room">
	<PlayersList Players="@CurrentRoom.Game.GameState.Players" />
	<GameField />
	<Betting CurrentBet="@CurrentBet" TotalPot="@TotalPot" />
</div>

@code {
	[Inject]
	public NavigationManager NavigationManager { get; set; }
	[Inject]
	public GameClient GameClient { get; set; }

	public decimal CurrentBet = 100;
	public decimal TotalPot = 150;

	[Parameter]
	public string RoomId { get; set; }
	[Parameter]
	public GameRoom? CurrentRoom { get; set; }

	private string? currentPlayerId { get; set; }
	private List<int> IndiciesToReroll { get; set; } = new List<int>();

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("Room_Initialized");
		GameClient.OnRoomsUpdated += StateHasChanged;
		GameClient.OnGameStateUpdated += UpdateGameState;
		GameClient.OnGameStateUpdated += StateHasChanged;

		CurrentRoom = GameClient.Rooms[RoomId];
		currentPlayerId = GameClient.GetCurrentPlayerId();
		Console.WriteLine($"Room_Initialized: {CurrentRoom.Name} - id: {CurrentRoom.Id}");
		Console.WriteLine($"Room_Initialized: player_id: {currentPlayerId}");
	}

	public void Dispose()
	{
		GameClient.OnRoomsUpdated -= StateHasChanged;
		GameClient.OnGameStateUpdated -= StateHasChanged;
	}

	private async Task StartGame()
	{
		if (CurrentRoom is not null)
		{
			Console.WriteLine("Room_StartGame");
			await GameClient.StartGame(CurrentRoom.Id);
			Console.WriteLine("Room_StartGame_success");
		}
	}

	private async Task OnRollDice()
	{
		if (CurrentRoom is not null)
		{
			Console.WriteLine("Room_OnRollDice");
			await GameClient.RollDice(CurrentRoom.Id, CurrentRoom.Game.GameState.CurrentPlayerId, IndiciesToReroll);
			Console.WriteLine("Room_OnRollDice_success");
		}
	}

	private async Task RerollDice(int diceIndex)
	{
		if (IndiciesToReroll.Contains(diceIndex))
		{
			IndiciesToReroll.Remove(diceIndex);
		}
		else
		{
			IndiciesToReroll.Add(diceIndex);
		}
		/*if (CurrentRoom is not null)
			{
			if (!IndiciesToKeep.Contains(diceIndex))
				IndiciesToKeep.Add(diceIndex);

			await GameClient.FreezeDice(CurrentRoom.Game.GameState.CurrentPlayerId, IndiciesToKeep);
		}*/
	}

	private string GetDiceImage(int diceValue)
	{
		return "";
	}

	private async Task LeaveRoom()
	{
		if (GameClient is not null)
		{
			await GameClient.LeaveRoom(RoomId, GameClient.GetCurrentPlayerId());
			NavigationManager.NavigateTo("/");
		}
	}

	private void UpdateGameState()
	{
		CurrentRoom = GameClient.Rooms[RoomId];
	}

	private async Task AddPlayer()
	{
		throw new NotImplementedException();
	}
}