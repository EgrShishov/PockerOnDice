@page "/room/{RoomId}"
@implements IDisposable

<PageTitle>Room @RoomId</PageTitle>

<div class="game-room">
	<PlayersList Players="@CurrentRoom.Game.Players" />
	<GameField />
	<Betting CurrentBet="@CurrentBet" TotalPot="@TotalPot" />
</div>

@code {
	[Inject]
	public NavigationManager NavigationManager { get; set; }
	[Inject]
	public GameClient GameClient { get; set; }

	public decimal CurrentBet = 100;
	public decimal TotalPot = 150;

	[Parameter]
	public string RoomId { get; set; }
	[Parameter]
	public GameRoom? CurrentRoom { get; set; }

	private string? currentPlayerId { get; set; }
	private List<int> IndiciesToKeep { get; set; } = new List<int>();

	protected override async Task OnInitializedAsync()
	{
		GameClient.OnRoomsUpdated += StateHasChanged;
		GameClient.OnGameStateUpdated += StateHasChanged;

		CurrentRoom = GameClient.Rooms[RoomId];
		currentPlayerId = GameClient.GetCurrentPlayerId();
	}

	public void Dispose()
	{
		GameClient.OnRoomsUpdated -= StateHasChanged;
		GameClient.OnGameStateUpdated -= StateHasChanged;
	}

	private async Task StartGame()
	{
		if (CurrentRoom is not null)
			await GameClient.StartGame(CurrentRoom.Id);	
	}

	private async Task OnRollDice()
	{
		if (CurrentRoom is not null)
		{
			await GameClient.RollDice(CurrentRoom.Game.CurrentPlayerId);
		}
	}

	private async Task FreezeDice(int diceIndex)
	{
		if (CurrentRoom is not null)
		{
			if (!IndiciesToKeep.Contains(diceIndex))
				IndiciesToKeep.Add(diceIndex);

			await GameClient.FreezeDice(CurrentRoom.Game.GameState.CurrentPlayerId, IndiciesToKeep);
		}
	}

	private string GetDiceImage(int diceValue)
	{
		return "";
	}

	private async Task LeaveRoom()
	{
		if (GameClient is not null)
		{
			await GameClient.LeaveRoom(RoomId, GameClient.GetCurrentPlayerId());
			NavigationManager.NavigateTo("/");
		}
	}

	private async Task AddPlayer()
	{
		throw new NotImplementedException();
	}
}