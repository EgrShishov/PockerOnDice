    <div class="game-table">
        <div class="decorative-frame">
            <div class="game-container">
                <div class="dice-area">
                    @for (int i = 0; i < p1_diceList.Count(); i++)
                    {
                        <div class="dice-slot @(p1_diceList[i].IsReroll ? "" : "frozen")">
                            <Dice DiceValue="@p1_diceList[i]"
                                  OnToggleFreeze="ToggleDiceSelection" />
                        </div>
                    }
                </div>
                <div class="center-artwork">
                </div>
                <div class="opponents-dice-area">
                    @for (int i = 0; i < p2_diceList.Count(); i++)
                    {
                        <div class="dice-slot @(p2_diceList[i].IsReroll ? "" : "frozen")">
                            <Dice DiceValue="@p2_diceList[i]"
                                  OnToggleFreeze="ToggleDiceSelection" />
                        </div>
                    }
                </div>
            </div>
            <div class="bottom-panel">
                <button class="roll-button" @onclick="RollDice">Roll Dice</button>
                <button class="end-turn-button" @onclick="EndTurn">End Turn</button>
            </div>
        </div>
    </div>

@code {

    [Inject]
    public NavigationManager? NavigationManager { get; set; }
    [Inject]
    public GameClient? GameClient { get; set; }

    [Parameter]
    public string? RoomId { get; set; }

    private GameRoom? CurrentRoom { get; set; }

    private string? PlayerId { get; set; }

    private List<DiceClass> p1_diceList = new();
    private List<DiceClass> p2_diceList = new();

    protected override void OnInitialized()
    {
        GameClient.OnRoomsUpdated += StateHasChanged;
        GameClient.OnGameStateUpdated += StateHasChanged;
        GameClient.OnGameStateUpdated += OnInitialized;

        CurrentRoom = GameClient.Rooms[RoomId];
        Console.WriteLine(CurrentRoom is null);
        Console.WriteLine(CurrentRoom.Name);
        PlayerId = GameClient.GetCurrentPlayerId();
        if (CurrentRoom.Game.GameState.IsGameStarted)
        {
            p1_diceList = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id == PlayerId).Dices;
            p2_diceList = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id != PlayerId).Dices;
        }
        Console.WriteLine($"Room_Initialized: {CurrentRoom.Name} - id: {CurrentRoom.Id}");
        Console.WriteLine($"Room_Initialized: player_id: {PlayerId}");
    }

    private void UpdateField(){

    }
    public void Dispose()
    {
        GameClient.OnRoomsUpdated -= StateHasChanged;
        GameClient.OnGameStateUpdated -= StateHasChanged;
    }

    private async Task StartGame()
    {
        if (CurrentRoom is not null)
        {
            Console.WriteLine("Room_StartGame");
            await GameClient.StartGame(CurrentRoom.Id);
            //p1_diceList = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id == PlayerId).Dices;
            //p2_diceList = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id != PlayerId).Dices;
            //StateHasChanged();
            Console.WriteLine("Room_StartGame_success");
            foreach (var dice in p1_diceList)
            {
                if (dice.IsReroll)
                {
                    dice.IsRolling = true;
                }
            }

            StateHasChanged();

            await Task.Delay(1000);

            var rand = new Random();
            foreach (var dice in p1_diceList)
            {
                if (dice.IsReroll)
                {
                    dice.IsRolling = false;
                }
            }

            StateHasChanged();
        }
    }

    private async Task RollDice()
    {
        if (CurrentRoom is not null)
        {
            Console.WriteLine("Room_OnRollDice");
            await GameClient.RollDice(CurrentRoom.Id, PlayerId, p1_diceList);
            p1_diceList = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id == PlayerId).Dices;
            p2_diceList = CurrentRoom.Game.GameState.Players.FirstOrDefault(p => p.Id != PlayerId).Dices;
            StateHasChanged();
            Console.WriteLine("Room_OnRollDice_success");
        }
    }

    private void ToggleDiceSelection(DiceClass value)
    {
        var index = value.Id;
        p1_diceList[index].IsReroll = !p1_diceList[index].IsReroll;
    }

    private async Task LeaveRoom()
    {
        if (GameClient is not null)
        {
            await GameClient.LeaveRoom(RoomId, GameClient.GetCurrentPlayerId());
            NavigationManager.NavigateTo("/");
        }
    }

    private void EndTurn()
    {
        // Logic for ending the turn
    }
}
